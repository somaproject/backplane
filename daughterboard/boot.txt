

-------------------------------------------------------------------------------
booting
-------------------------------------------------------------------------------
Separate boot fpga, talks to event bus, has general purpose GPIO pins. Designed to take a CF card of bitstreams... 

0.5 MB (4 Mb) should be more than enough, and we can always do some sort of funky look-up scheme. the nice thing is we can just DD the image, we don't need to worry about any sort of filesystem or anything. 

The ATA spec is really clean, and (beyond basic abstraction necessity stuff) I can't seem to think of why I would want to have separate USB and BOOT devices, esp. when there can never actually be _real_ bus contention. 

Each FPGA will need it's own DONE, PROGRAM, INIT, and DIN pin, but... how to handle them?, esp. without running out of pins, or having too-high-density of connector? 

Sadly, there appear to be pin issues with the VQ100 part, as it really only has 60 or so IO pins, and we need:
Event bus: 30
ATA : 20+
Booting: 5 per fpga * 8 FPGAs = 40 pins or so

== total of 90 pins, i.e. what you'd hope to get from the TQ144 part. 


Compact flash issues:

sandisk has an appnote for interfacing with an 8051
and really helpful is the circuit cellar article



from dejanews:
http://groups.google.com/groups?hl=en&lr=&ie=UTF-8&selm=02ocvusljhontudrc0vd0k9ajfma0ctkoq%404ax.com


No, there is no problem at all to operate the CF in so called memory
mapped mode with 8 bit data bus and as few as 3 address lines. In fact
the number of lines - if reduced to the minimum needed - is identical
to true IDE mode (GND, VCC, 3 address lines, 8 datalines, IOR, IOW and
Chipselect). Memory mapped mode is preferable because on most uC's it
allows a slightly faster implementation. I figure that many people are
misleaded by the term "memory mapped" (at least I was!) because this
does NOT mean that the sector data would be mapped to RAM nor that
random access to the sector buffer in the CF's memory space is
possible. All it means is that the 16 IO registers are mapped. They
are layed out in a way so as 8 registers are sufficient for basic
operations (hence the minimum of 3 address lines). They also
implemented a "trick" which is the reason why memory mapped mode might
be faster with uC's supporting block move operations than true IDE. In
memory mapped mode, by setting address line 10 high the CF ignores all
other address lines. That is block operations to or from address $400
can be used which actually means that all data is read or written to
address '0' in the CF's address space. Address '0' however is the data
IO register. Even with only the minimum of wires memory mapped mode is
having three (IMHO important) advantages over true IDE mode namely:

- the hot plugable feature
- the fact that it's the CF's default mode and hence is well tested
among a broad range of manufacturers.
- No need to specially instruct the CF that 8 bit IO should be
performed. (Well, that's not so important as the others but nice
anyways)

If you can spend a fourth address line to impement the IO trick
mentioned, there might be a speed increase possible. Just to point it
out clearly, in memory mapped mode the CF's exlusively look at address
lines 1 - 4 and line 10. All other lines are simply ignored. While the
CF specs document this, it's not really that clear at a first view. I
highly recommend the documentation and sample implementations
available from SanDisk.

I honestly would be surpriced if the majority of Digital Cameras
really would operate them in True IDE mode. Especially because the hot
plug feature is IMHO very important for such devices. It might be that
some implementors did it the IDE way, but at least I hope the majority
did it different. But then we might just found out why SanDisk
supports hot plugging in True IDE mode also....

HTH


From the CF FAQ, it appears that 3.3V operation won't be a problem. 

Tables 20, 22, 24, 28, 29, 30
