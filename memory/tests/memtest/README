This is a test to see if we can actually read and write memory properly. 

It's also a verification of whether we can synthesize this thing or not. 

We have a simple interface which, in a ping-pong fashion:

1. writes a burst pattern to a row; 
2. reads a burst pattern from a row; 

we compare what was written and what we read back and: 
1. if there's an error, we flash a LED


We generate the primary clock from the input 50 MHz clock, tripling it
to 150 MHz and then passing that output through a phase-adjusting DLL.

---------------------------------------------------------------------------
TEST LOG
---------------------------------------------------------------------------

13 November 2006
Well, it doesn't work, and the entire board then proceeds to suck down 1.5A @3.3V. 

First, check stupid stuff. The memtesttest module works, and sets
LEDERROR =0.


Now, check the UCF File: Everything is correct. 

Do we need a resistor to terminate the fracking CK/CK-? Adding one, 100 ohm... no luck. 

Signals all "look good" with oscope. 

How about DCI resistors -- we have two ~45ohm ones right
now. According to page 228 of the UG070 xilinx Virtex-4 User guide,
VRN=VRP=R=Z_o, so this should be correct.

Post-P&R Sim model works -- LEDERROR remains 0 and I can verify that
bytes are being read and written.

Is it a problem with the memclk phase? 
clkout <= clk90 -- error
clkout <= clk   -- error
clkout <=clk180 -- error
clkout <= clk270 -- error


Disable Rtt, disable DQS#

PHYSICALLY isolate the ODT line from the PCB, being careful not to cut self in process. 

IF we write all 0s we successfully read back all zeros. 

== 14 November 2006 ==

At vimal's suggestion we're making a generic jtag interface to this. Duh!

The interface is based on 3 jtag USER registers, 1-3:

USER1: controls R, W, ROWTGT, and initiates read or write operation
USER2: writes into a dual-ported memory buffer for memory write operations
USER3: reads from a dual-ported memory buffer for memory read operations


There appear to be lots of "unused states" for the startup, and I'm not sure what the heck that is.

WOW WE CAN READ OUT ROWS!!! There exist bit errors, byte errors, and frame errors, but we are very clearly taking bytes out of this ram. 

Now, with the CLKOUT being regular CLK we get a much better result, although the bytes are shifted. 
