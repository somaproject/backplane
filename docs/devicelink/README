Things to discuss: 

devicelink 

1. wire protocol, bits, etc. 
   why serial
   encoding schemes
   data rates
   device -- uses commercial DES

2. physical layer, lvds, controlled-impedance, connectors. 


3. The link lock protocol 

FPGA Core implementation -- IO 

Link to somabackplane/devicelink/docs for the prototypical client implementation and API 




------------------------------------------------
Connector
------------------------------------------------

The SATA backplane connector will be used; SATA signal pairs have a
100-ohm impedance.

In terms of actual connectors, we have a few options: 

On the DSPboard side, we have: 
  The device plug with the strattle mount: 87679-0003 (Arrow has 1k)
  Device plug smt without jumpers -- 87703-0001 (arrow has 1k)

On the backplane side, we have two of our standard-height connectors: 
  1. 87713-1001 -- SMT mount

---- 
PCB 
---

For high-speed serial interconnect, the SATA standard recommends "differential microstrip traces (100+/- 5 ohms) over a ground plane (single ended 50+/-2.5 ohms). However, this results in a trace width and spacing that is just unmanagable. 

According to PCBexpress, these processes are dependent on the exact
geometry of the copper between the traces.

See 4pcb.stack.txt
    pcb-express1.txt
    pcb-express-2.txt

A good number to go with is 7-8 mil, and so we're using the following:
epsilon = 4.6
w = 9 # trace width 
s = 9. # trace separation 
t = 1.4 # trace thickness 
h = 7.5 # height above ground plane

Z0 =  59.4565832263
Zdiff =  100.876181706

A little high on the common-mode impedance, but the standard suggests
that doesn't really matter anyway.


The serialization of Event and Data packets maps to OSI levels 3 and
below. This document describes the physical medium used, the bit and
byte encoding scheme, and modules written to allow for their
interaction.

This here JUST DISCUSSES THE ACTUAL SERIAL INTERFACE

We use a 100-ohm differential impedance SATA connector, in both
backplane and cable connections; each LVDS pair is unidirectional but
the rate of transmission is asymmetric.


We wanted the device to easily synthesize in a Xilinx Spartan-3 FPGA,
the FPGA of choice for Soma. Restrictions were thus placed on our
manner of deserialiation. We choose to exploit the Spartan-3's
abundant clock manipulation resources to allow a receiver to
oversample the data stream.

Part of the challenge came in getting a spartan-3 to perform the
necessary clock and data recovery, to synthesize cleanly (without too
much effort or too fragile a design), and for the DCMs to clock fast
enough, without using up all of our clocking resources.

As a result, we've settled on having all client devices use an
off-the-shelf deserializer IC which presents a 10-bit-wide interface
to the client, and to synchronously (DDR) transmit the necessary
bits. We still encode the data as an 8b/10b data stream to maintain DC
offset and use our existing control character infrastructure.

The Soma Backplane Core Virtex-4 is fast enough and has the dedicated
clocking resources necessary to recover the 8b/10b data stream . In
addition, by driving the bulk of the device FPGA with the recovered
clock, we essentially implement a synchronous system, with exactly the
correct number of bits and bytes arriving at all times, thus
eliminating difficult-to-work-with DOENs.


The bitstream is 8b/10b encoded because the codec is 

1. no longer patented 

2. guarantees clock transitions for our synchrnization efforts

3. widely understood 

4. has embedded punctuation to allow framing and out-of-band
   signalling with minimal effort, including K28.5, which allows for
   easy byte locking

5. Xilinx has an easy-to-use implementation -- in time, we hope to
   replace this with native IP for a truly Free Solution

In fact, we've changed this to be an asymmetric bidirectional serial interface wi
