Backplane redesign, part two

-----------------------------------------------
Bandwidth Allocation
-----------------------------------------------

THe first question to address is what sort of bandwidth requirements
we have. The original event bus required an event cycle every
timestamp (every 20 us), between 40 devices.

With our new routing scheme, each event has 12 bytes of data and a
1-byte comma character. that's 13 byte symbols, 40 events per cycle,

50k cycles/ second * 40 events/cycle * 13 bytes/event = 208 Mbps of
raw data, and thus (via 8b/10b) = 260 Mbps.

I was worried about the addressing overhead, but the FPGA can handle
the routing. 

The TX side is fine, we don't send that much data. 

Allocation of events: 
32 DSPs
2 ADIO
2 NEP
1 NET
1 ETHER
1 SYS
1 TIMER/Coordinator
-----------------------------
40 


------------------------------------------------
Booting
------------------------------------------------

We're going to use the SATA serial interface and the SATA backplane
connectors. The problem is "how do we boot the FPGAs". We're going to 8b/10b-encode a configuration bitstream and use the 12v power connector. 

-------------------------------------------------
Devices and timing
-------------------------------------------------
The suggested xilinx app note is for -5 spartan-3 devices. 
We need to show that -4 devices can do 240 Mbps. 

Power
TPS786xx -- ubiquitus, many voltages, etc.  1.5A output
We're going to use the KTT (DDPAK-5) package because it appears to be more widely available and looks like it can handle more power. 


switching supplies are a pain to design and use and mount; I'm just
going to use the PTH05010W power supply module... in fact, I'm going
to use three:

----------------------------------------
Clocking
----------------------------------------

we have an input clock rate of 65 MHz
an output bit/clock rate of 260 MHz
and an rx rate of 260 + epsilon

input --> x4 --> tx clock --> 32/31 --> rxclk --> phasedelay




--------------------------------------------------------------------------
We still need to check the error handling here; the goal is that no
error-full events will ever get through, and an error causes us to
abort the rest of the event cycle.


--------------------------------------------------------------------------
device transmitter
--------------------------------------------------------------------------

how do we handle the -actual- transmission; it's fine and dandy to say that we're going to send an event at "some point", but when are these going to actually be received? 

There are hard real-time expectations. That said, I'd just as soon
send them whenever, with the understanding that if they are sent such
that the last byte occurs 10 ticks prior to the end of the ECYCLE AS
DEFINED IN THE CORE, then we'll make it.

So we should just be able to clock in an event at any time. 

But we're limited to one per ecycle. But we make the application deal with that. 
At the start of an event we 

