Backplane redesign, part two

-----------------------------------------------
Bandwidth Allocation
-----------------------------------------------

THe first question to address is what sort of bandwidth requirements
we have. The original event bus required an event cycle every
timestamp (every 20 us), between 40 devices.

With our new routing scheme, each event has 12 bytes of data and a
1-byte comma character. that's 13 byte symbols, 40 events per cycle,

50k cycles/ second * 40 events/cycle * 13 bytes/event = 208 Mbps of
raw data, and thus (via 8b/10b) = 260 Mbps.

I was worried about the addressing overhead, but the FPGA can handle
the routing. 

The TX side is fine, we don't send that much data. 

Allocation of events: 
32 DSPs
2 ADIO
2 NEP
1 NET
1 ETHER
1 SYS
1 TIMER/Coordinator
-----------------------------
40 


------------------------------------------------
Booting
------------------------------------------------

We're going to use the SATA serial interface and the SATA backplane
connectors. The problem is "how do we boot the FPGAs". We're going to 8b/10b-encode a configuration bitstream and use the 12v power connector. 

------------------------------------------------
Connector
------------------------------------------------

The SATA backplane connector will be used; SATA signal pairs have a
100-ohm impedance.

In terms of actual connectors, we have a few options: 

On the DSPboard side, we have: 
  The device plug with the strattle mount: 87679-0003 (Arrow has 1k)
  Device plug smt without jumpers -- 87703-0001 (arrow has 1k)

On the backplane side, we have two of our standard-height connectors: 
  1. 87713-1001 -- SMT mount

---- 
PCB 
---

For high-speed serial interconnect, the SATA standard recommends "differential microstrip traces (100+/- 5 ohms) over a ground plane (single ended 50+/-2.5 ohms). However, this results in a trace width and spacing that is just unmanagable. 

According to PCBexpress, these processes are dependent on the exact
geometry of the copper between the traces.

See 4pcb.stack.txt
    pcb-express1.txt
    pcb-express-2.txt

A good number to go with is 7-8 mil, and so we're using the following:
epsilon = 4.6
w = 9 # trace width 
s = 9. # trace separation 
t = 1.4 # trace thickness 
h = 7.5 # height above ground plane

Z0 =  59.4565832263
Zdiff =  100.876181706

A little high on the common-mode impedance, but the standard suggests
that doesn't really matter anyway.



-------------------------------------------------
Devices and timing
-------------------------------------------------
The suggested xilinx app note is for -5 spartan-3 devices. 
We need to show that -4 devices can do 240 Mbps. 

Power
TPS786xx -- ubiquitus, many voltages, etc.  1.5A output
We're going to use the KTT (DDPAK-5) package because it appears to be more widely available and looks like it can handle more power. 


switching supplies are a pain to design and use and mount; I'm just
going to use the PTH05010W power supply module... in fact, I'm going
to use three:

----------------------------------------
Bus routing, clocks, configuration
----------------------------------------
we have an EVENTCE signal, internally, which gates an input event. 


We have a "router" who is responsible for multiplexing/sequencing the events properly. In the A+D cycles the router clocks the following Address and DATA bytes onto the relevant bus; this is all happening at the core 26 MHz. 

Each reciver module takes in the relevant A+D bytes and then TXes them on the next clock cycle at the appropriate clock rate. A compile-time generic dictates which events something responds to. 

This causes a very interesting timing problem, because the timing external to the core will be roughly an event cycle behind the internal state. 

We use 4 commas in our dual-link data stream: 
new event cycle (K28.5)
event is for A (K28.1)
event is for B (K28.2) 
event is for both (K28.3) 



