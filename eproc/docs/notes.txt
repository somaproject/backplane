Things we might want to do ? 

We start off with the knowledge that we're in a desired event/src
In the system boot context, we clearly want
to : 

It will potentially take 7 ticks to send an event where we specify all
the event bits!

How do we code this up? 

I like the idea of doing as little work as possible (and possibly
having python generate the code)

I also like the idea of symbolic register names for sharing
state across variables
and I want to be able to have the assembler figure out how long a procedure
takes to execute

proc.add(r1, r2, r3)
proc.addc()
proc.load(r2, 0x1234)
proc.label("Foo") # label a position 
proc.foreverloop()
proc.jz("bar")
proc.jump(otherproc)

How do we have shared state in this context? Create a global environment, 
in which we create variables and use those as register names? 

env = CreateEnvironment()
env.addVar("foo")
env.addVar("bar")

proc = CreateProc(env)
proc.


------------------------------------------------------------------
how to handle event dispatch? 

