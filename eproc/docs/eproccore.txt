\subsection{Two-Phase Operation}
There are two phases of each instruction, thus two clock ticks. In the first
clock tick, the CPHASE signal is low, and during the second it is high. 


Core operations we want: 

increment register
add registers
load immediate lower byte
load immediate upper byte
swap bytes in a register
compare two registers
jump if latest comparison was zero
jump if latest comparison was gt
jump if latest comparison was lt
and registers
or registers
xor regsters
not registers
Asel (noop)
BSEL (noop)
shift right
shift left
shift right carry
shift left carry
jump if a bit is set

We also have the ability to use the events as a source in terms of an
op A or B being loaded into the


ALU ops store the result in REGADDRA, and take the input from 
register REGADDRB and REGADDRA or REGADDRB and EADDR
