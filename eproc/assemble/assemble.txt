
I also like the idea of symbolic register names for sharing
state across variables
and I want to be able to have the assembler figure out how long a procedure
takes to execute

proc.add(r1, r2, r3)
proc.addc()
proc.load(r2, 0x1234)
proc.label("Foo") # label a position 
proc.foreverloop()
proc.jz("bar")
proc.jump(otherproc)

How do we have shared state in this context? Create a global environment, 
in which we create variables and use those as register names? 

env = CreateEnvironment()
env.addVar("foo")
env.addVar("bar")

proc = env.CreateProc()
proc.


rs = proc.createVar()

proc.load(rs, 
