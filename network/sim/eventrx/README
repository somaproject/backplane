Event Receive test -- test the proper input of events onto the
backplane, and verify proper tx/rx packet retransmission behavior.

We have the standard fifo-overflow-detection problem here: How do we
test proper fifo overflow behavior without going through the hassle of
modelling the entire system in a tick-accruate way? 

What behaviors do we care about? 
1. are inbound events from a given IP placed on the event bus at all? 

2. are they placed in the proper order, i.e. is the first event in an inbound packet placed first? 

3. if we send too many events are they committed and rejected in an
atomic fashion?

To generate the packet, we create inbound events from a client and
generate responses. 

We also read in all events via the eventrxverify module from events.txt


---------------------------------------------------------------------
Data Generation
---------------------------------------------------------------------
We have a script, network.py, which has a client mode and a server mode. 

SERVER MODE: the system listens for incoming event sets, and then responds to the sender with an event success reply

to allow for later packet detection and analysis. 

CLIENT MODE: 
we generate event sets and send them to the server, writing 'events.txt', with all events in hex (suuitable for reading with hread)

OTHER DATA: 
We need to capture the TX and two RX packets from each eventset via tcpdump: 

tcpdump -i eth2  udp port 5000  -t -xx -s 2000 > data.tcpdump

we then need to parse the data.tcpdump and turn it into the
appropriate packets for input into InputControl and comparison with
the output. This is done by dumpparse.py, which separates the dump by
source/destination port. The format is wordlen, #bytes, and the client
requests have the FCS appended.


-------------------------------------------------------------------------
VHDL testbench organization
-------------------------------------------------------------------------

1. read in the client requests, and push them to the inputcontrol. Record the number of events transmitted in datagram_ecnt; 

2. wait for a response from the server, and if it's a success, do nothing. If it's a failure, use datagram-ecnt and datagram_totalcnt to invalidate the events in the eventverify module. 

datagram_ecnt: number of events in current pending datagram
datagram_totalcnt: number of events sent in total
