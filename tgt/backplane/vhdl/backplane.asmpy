"""

A boot set consists of a filename and serial device mask.

Then for each boot set we: 
0. get Handle
1. send open file event
2. open file, save file length
2. currentpos = 0
3. while currentpos < filelength
4. send a req for 512 bytes
5. process incoming bytes by sending to the interface and the commiting the output
   word
   
# and the event dispatches
For the time being, event 100-105 will simply
trigger the appropriate writes
to the serial peripheral.

0x08-0x0F are the relevant commands
0x08 (000): lower 16 bits of mask
0x09 (001): upper 4 bits of mask
0x0A (010): write data
0x0B (011): toggle FPROG
0x0C (100): send the current buffer

"""
import math

env = createEnvironment()
currentBootSet = env.createVariable("currentBootSet")
currentFileHandle = env.createVariable("currentFileHandle")
currentFileSizeL = env.createVariable("currentFileSizeL")
currentFileSizeH = env.createVariable("currentFileSizeH")
currentFilePosL = env.createVariable("currentFilePosL")
currentFilePosH = env.createVariable("currentFilePosH")
currentState = env.createVariable("currentState")
nextState = env.createVariable("nextState")
serialSendTimer = env.createVariable("serialSendTimer")
cmdBootserWriteBytes = env.createVariable("cmdBootserWriteBytes")
cmdBootserSendBytes = env.createVariable("cmdBootserSendBytes")
debugCounter = env.createVariable("debugCounter")


### CONSTANTS

EVENTOUT_CMD = 0x80
EVENTOUT_SRC = 0x87
EVENTOUT_DATA0 = 0x81
EVENTOUT_DATA1 = 0x82
EVENTOUT_DATA2 = 0x83
EVENTOUT_DATA3 = 0x84
EVENTOUT_DATA4 = 0x85
EVENTPROC_ENABLE = 0x89
EVENTPROC_ADDR = 0x88

FPROGOUT_MASKL = 0x08
FPROGOUT_MASKH = 0x09
FPROGOUT_DATA = 0x0A
FPROGOUT_FPROG = 0x0B
FPROGOUT_SEND = 0x0C
FPROGOUT_DATAPOINTERRST = 0x0D

BS_GETHANDLE = 0x90
BS_SETFILENAME = 0x91
BS_OPENFILE = 0x92
BS_READDATA = 0x93
BS_YIELDHANDLE = 0x94

DLINKQUERY_CMD = 0x20
DLINKQUERY_RESP = 0x20

DLINKQUERY_COUNT_CMD = 0x21
DLINKQUERY_COUNT_RESP = 0x21

DLINKQUERY_COUNT_ADDR_BASE = 0x40

EVENT_DLINKDEBUG_CMD = 0x22
EVENT_DLINKDEBUG_RESP = 0x22

# manual boot interface commands
MANBOOTSER_SETMASK = 0xA0
MANBOOTSER_TOGPROG = 0xA1
MANBOOTSER_WRITEBYTES = 0xA2
MANBOOTSER_SENDBYTES = 0xA3

# miscellaneous events
EVENT_CMD_PING = 0x08
EVENT_CMD_PING_RESPONSE = 0x09


# read addresses
DLINKUP_LOW = 0x00
DLINKUP_HIGH = 0x01

### EVENT BUS ADDRESSES
EADDR_BOOTSTORE = 2
EADDR_NETCONTROL = 4 
EADDR_JTAG = 7

### STATES
STATE_GETHANDLE = 0
STATE_LOADBOOTSET = 1
STATE_SENDFILENAME = 2
STATE_OPENFILE = 3
STATE_READDATA = 4 # send the read command for the next N bytes or done
STATE_SERWAITTX = 5
STATE_YIELDHANDLE = 6
STATE_POSTBOOT = 7
STATE_DONE = 8
STATE_WAIT = 255

READSIZE = 8

### BOOT SETS
BOOTSET_NIC = 0
BOOTSET_DSP = 1


def testProc():
  proc = env.createProc("testProc")
  proc.load(0, 0)
  proc.load(0, 0xFFFF)
  proc.output(FPROGOUT_MASKL, 0)
  proc.output(FPROGOUT_FPROG, 0)
  proc.foreverLoop()
  
def jumpIfEqual(proc, tempreg, reg, const, addr):
  """
  if reg == const, jump to addr

  note const  must be < 256
  
  """
  proc.load(tempreg, const)
  proc.sub(tempreg, reg)
  proc.jz(addr)
  

def createEventCycleProc():
  ecp = env.createECycleProc()
  tmp = ecp.createVariable("tmp")

  jumpIfEqual(ecp, tmp, env.nextState, STATE_POSTBOOT, "proc_state_postboot")
  jumpIfEqual(ecp, tmp, env.nextState, STATE_GETHANDLE, "proc_state_gethandle")
  jumpIfEqual(ecp, tmp, env.nextState, STATE_LOADBOOTSET, "proc_state_loadbootset")
  jumpIfEqual(ecp, tmp, env.nextState, STATE_OPENFILE, "proc_state_openfile")
  jumpIfEqual(ecp, tmp, env.nextState, STATE_READDATA, "proc_state_readdata")
  jumpIfEqual(ecp, tmp, env.nextState, STATE_SERWAITTX, "proc_state_serwaittx")
  jumpIfEqual(ecp, tmp, env.nextState, STATE_YIELDHANDLE, "proc_state_yieldhandle")
  jumpIfEqual(ecp, tmp, env.nextState, STATE_DONE, "proc_state_done")
  ecp.foreverLoop()


def proc_state_loadbootset():
  proc = env.createProc("proc_state_loadbootset")
  tmp = proc.createVariable("tmp5")
  src = proc.createVariable("src")
  cmd = proc.createVariable("cmd")
  # right now there's just a single boot set
  jumpIfEqual(proc, tmp, env.currentBootSet, BOOTSET_NIC, "proc_state_loadbootset_nic")
  jumpIfEqual(proc, tmp, env.currentBootSet, BOOTSET_DSP, "proc_state_loadbootset_dsp")
  proc.jump("proc_state_loadbootset_finalize")
  
  
  proc.label("proc_state_loadbootset_nic")
  setBootSerMask(proc, tmp, 0x01)
  setBootFilename(proc, tmp, src, cmd, "network.bit")
  proc.jump("proc_state_loadbootset_finalize")
  
  proc.label("proc_state_loadbootset_dsp")
  setBootSerMask(proc, tmp, 0xFFFF << 4)
  setBootFilename(proc, tmp, src, cmd, "dsp.bit")
  proc.jump("proc_state_loadbootset_finalize")
  

  proc.label("proc_state_loadbootset_finalize")
  proc.output(FPROGOUT_FPROG, 0) 

  proc.load(env.nextState, STATE_OPENFILE)
              
  proc.foreverLoop()
  
def proc_state_done():
  proc = env.createProc("proc_state_done")
  tmp = proc.createVariable("tmp17")
  jumpIfEqual(proc, tmp, env.currentBootSet, BOOTSET_NIC, "proc_state_done_DSP")
  jumpIfEqual(proc, tmp, env.currentBootSet, BOOTSET_DSP, "proc_state_done_done")

  proc.label("proc_state_done_DSP")
  proc.load(env.currentBootSet, BOOTSET_DSP)
  proc.load(env.nextState, STATE_GETHANDLE)
  proc.foreverLoop()
  
  proc.label("proc_state_done_done")
  proc.foreverLoop()
  
  
  proc.foreverLoop()
  
def proc_state_gethandle():
  """
  Send the get-handle event.
  
  """
  proc = env.createProc("proc_state_gethandle")
  sendOpenHandleEvent(proc)
  proc.load(env.nextState, STATE_WAIT)
  proc.foreverLoop()
  
def proc_state_openfile():
  """
  send the open file event
  
  """
  proc = env.createProc("proc_state_openfile")
  tmp = proc.createVariable("tmp")

  # reset the file pos
  proc.load(env.currentFilePosL, 0)
  proc.load(env.currentFilePosH, 0)

  # write the dest
  proc.load(tmp, EADDR_BOOTSTORE)
  proc.output(EVENTOUT_SRC, tmp)

  # load the handle
  proc.move(tmp, env.currentFileHandle)
  proc.swapbytes(tmp, tmp)

  # write the command
  proc.load(tmp, BS_OPENFILE)
  proc.output(EVENTOUT_CMD, tmp)

  proc.load(env.nextState, STATE_WAIT)
  proc.foreverLoop()
  

def proc_state_readdata():
  """
  send the readdata event
  
  """
  proc = env.createProc("proc_state_readdata")
  tmp = proc.createVariable("tmp")
  zero = proc.createVariable("zero")
  proc.load(zero, 0)

  # set the adder
  proc.output(EVENTOUT_DATA1, env.currentFilePosH)
  proc.output(EVENTOUT_DATA2, env.currentFilePosL)

  # check if the current file pos is > the target
  tmph = proc.createVariable("tmph")
  tmpl = proc.createVariable("tmpl")

  proc.move(tmph, env.currentFileSizeH)
  proc.move(tmpl, env.currentFileSizeL)
  proc.sub(tmpl, env.currentFilePosL)
  proc.subc(tmph, env.currentFilePosH)
  proc.jltz("proc_state_readdata_done")
  
  
  # increment the current file pos
  proc.load(tmp, READSIZE)
  proc.add(env.currentFilePosL, tmp)
  proc.addc(env.currentFilePosH, zero)
  
  # write the dest
  proc.load(tmp, EADDR_BOOTSTORE)
  proc.output(EVENTOUT_SRC, tmp)

  # load the handle
  proc.move(tmp, env.currentFileHandle)
  proc.swapbytes(tmp, tmp)

  # set the length
  proc.load(tmp, 0x00)
  proc.output(EVENTOUT_DATA3, tmp)
  proc.load(tmp, READSIZE)
  proc.output(EVENTOUT_DATA4, tmp)
  
  # write the command
  proc.load(tmp, BS_READDATA)
  proc.output(EVENTOUT_CMD, tmp)

  proc.load(env.nextState, STATE_WAIT)
  proc.foreverLoop()
  proc.label("proc_state_readdata_done")
  proc.load(env.nextState, STATE_YIELDHANDLE)
  proc.foreverLoop()
  

def proc_state_serwaittx():
  """
  spinloop to wait until the data is tx'd out the serial interface  
  """
  proc = env.createProc("proc_state_serwaittx")
  tmp = proc.createVariable("tmp")

  # if timer is zero, set state to read data
  jumpIfEqual(proc, tmp, env.serialSendTimer, 0, "proc_state_serwaittx_jumpto")

  # else decrement timer
  proc.load(tmp, 1)
  proc.sub(env.serialSendTimer, tmp)
  proc.load(env.nextState, STATE_SERWAITTX)
  proc.foreverLoop()
  proc.label("proc_state_serwaittx_jumpto")
  proc.load(env.nextState, STATE_READDATA)
  proc.foreverLoop()
  
def proc_state_yieldhandle():
  """
  send the "Done with file handle" event
  
  """
  proc = env.createProc("proc_state_yieldhandle")
  tmp = proc.createVariable("tmp")

  # write the dest
  proc.load(tmp, EADDR_BOOTSTORE)
  proc.output(EVENTOUT_SRC, tmp)

  # load the handle
  proc.move(tmp, env.currentFileHandle)
  proc.swapbytes(tmp, tmp)

  # write the command
  proc.load(tmp, BS_YIELDHANDLE)
  proc.output(EVENTOUT_CMD, tmp)

  proc.load(env.nextState, STATE_POSTBOOT)
  proc.foreverLoop()
  

def proc_state_postboot():
  """
  for each bootset, there's a specific set of post-boot steps and
  states we can go through
  
  """
  proc = env.createProc("proc_state_postboot")
  tmp = proc.createVariable("tmp2")

  jumpIfEqual(proc, tmp, env.currentBootSet, BOOTSET_NIC, "postboot_nic")

  proc.foreverLoop()

def postboot_nic():
  """
  Post-boot operations for the NIC; including resetting the PHY and writing the
  correct register

  """

  proc = env.createProc("postboot_nic")
  tmp = proc.createVariable("tmp3")
  proc.load(tmp, EADDR_NETCONTROL)
  proc.output(EVENTOUT_SRC, tmp)
  proc.load(tmp, 0x31)
  proc.output(EVENTOUT_CMD, tmp)

  proc.load(env.nextState, STATE_DONE)
  proc.foreverLoop()
  

def bootStoreFileOpenRX():
  proc = env.createEProc((BS_OPENFILE, BS_OPENFILE), (EADDR_BOOTSTORE, EADDR_BOOTSTORE))
  # put the file size into the file size buffer
  proc.move(env.currentFileSizeH, ereg.edata[1])
  proc.move(env.currentFileSizeL, ereg.edata[2])
  proc.load(env.nextState, STATE_READDATA)
  
  
def setBootSerMask(proc, tmp, val):

  proc.load(tmp, val & 0xFFFF)
  proc.output(FPROGOUT_MASKL, tmp)
  
  proc.load(tmp, (val >> 16) &  0xFFFF)
  proc.output(FPROGOUT_MASKH, tmp)

def setBootFilename(proc, tmpreg, cmdreg, srcreg,  filename):
  tmp = tmpreg
  cmd = cmdreg
  src = srcreg
  proc.load(cmd, BS_SETFILENAME)
  proc.load(src, EADDR_BOOTSTORE)
  
  flen = len(filename) + 1

  fcharlist = [0] * 32
  for i in xrange(len(filename)):
    fcharlist[i] = ord(filename[i])
  
  fnamepos = 0
  for i in xrange( int(math.ceil(flen / 8.0))):
    # load in the filename
    
    proc.load(tmp, (fcharlist[i * 8 + 0] << 8) | (fcharlist[i * 8 + 1]))
    proc.output(EVENTOUT_DATA1, tmp)
    
    proc.load(tmp, (fcharlist[i * 8 + 2] << 8) | (fcharlist[i * 8 + 3]))
    proc.output(EVENTOUT_DATA2, tmp)
    
    proc.load(tmp, (fcharlist[i * 8 + 4] << 8) | (fcharlist[i * 8 + 5]))
    proc.output(EVENTOUT_DATA3, tmp)
    
    proc.load(tmp, (fcharlist[i * 8 + 6] << 8) | (fcharlist[i * 8 + 7]))
    proc.output(EVENTOUT_DATA4, tmp)
    
    # set the event and send

    
    proc.move(tmp, env.currentFileHandle)
    proc.immhighload(tmp, i * 8)
    proc.swapbytes(tmp, tmp)
    proc.output(EVENTOUT_SRC, src)
    proc.output(EVENTOUT_DATA0, tmp)
    proc.output(EVENTOUT_CMD, cmd)


def bootStoreHandleSetRX():
  proc = env.createEProc((0x90, 0x90), (EADDR_BOOTSTORE, EADDR_BOOTSTORE))
  # put the handle int he handle buffer
  proc.move(env.currentFileHandle, ereg.edata[1])
  proc.load(env.nextState, STATE_LOADBOOTSET)

def sendOpenHandleEvent(proc):
  tmp = proc.createVariable("handleOpenTemp")
  # write the dest
  proc.load(tmp, EADDR_BOOTSTORE)
  proc.output(EVENTOUT_SRC, tmp)
  # write the command
  proc.load(tmp, BS_GETHANDLE)
  proc.output(EVENTOUT_CMD, tmp)
  

### The -respond-and-output-bytes
def bootStoreFileReadRX():
  """
  Receives event 0x94 from bootstore (new data) and sends it out
  via the serial interface
  
  """
  datap = env.createEProc((0x94, 0x94), (2, 2))
  tmp = datap.createVariable("tmp")
  for i in xrange(4):

    datap.move(tmp, ereg.edata[i+1])
    datap.output(FPROGOUT_DATA, tmp)
  # then commit
  datap.output(FPROGOUT_SEND, 0x00)
  datap.load(env.serialSendTimer, 0x6)
  datap.load(env.nextState, STATE_SERWAITTX)
  


def createEnableEventCycleProc():
  newproc = env.createProc("enableEventCycleProc")
  y = newproc.createVariable("y")
  newproc.load(env.cmdBootserWriteBytes, MANBOOTSER_WRITEBYTES)  
  newproc.load(env.cmdBootserSendBytes, MANBOOTSER_SENDBYTES)  
  newproc.load(y, 1)
  newproc.output(EVENTPROC_ENABLE, y)
  newproc.foreverLoop()

def createDLinkStatusQueryResponse():
    proc = env.createEProc((DLINKQUERY_CMD, DLINKQUERY_CMD),
                           (0, 255))
    lowbits = proc.createVariable("lowbits")
    highbits = proc.createVariable("highbits")
    tmp = proc.createVariable("tmp")

    proc.input(DLINKUP_HIGH, highbits)
    proc.output(EVENTOUT_DATA0, highbits)

    proc.input(DLINKUP_LOW, lowbits)
    proc.output(EVENTOUT_DATA1, lowbits)

    proc.input(0x02, lowbits)
    proc.output(EVENTOUT_DATA2, lowbits)
    
    proc.input(0x32, lowbits)
    proc.output(EVENTOUT_DATA3, lowbits)
    
    
    # now create the response event
    proc.move(tmp, ereg.src)
    proc.output(EVENTOUT_SRC, tmp)

    # event
    proc.load(tmp, DLINKQUERY_RESP)
    proc.output(EVENTOUT_CMD, tmp)
        
def createDLinkStatusCountResponse():
    proc = env.createEProc((DLINKQUERY_COUNT_CMD, DLINKQUERY_COUNT_CMD),
                           (0, 255))
    tgtaddr = proc.createVariable("tgtaddr")
    count = proc.createVariable("count")
    tmp = proc.createVariable("tmp")

    proc.move(tgtaddr, ereg.edata[0])
    proc.output(EVENTOUT_DATA0, tgtaddr)

    proc.immadd(tgtaddr, DLINKQUERY_COUNT_ADDR_BASE)
    
    #proc.output(EVENTOUT_DATA1, tgtaddr)

    proc.inputreg(tgtaddr, count)
    proc.output(EVENTOUT_DATA2, count)

    proc.immadd(env.debugCounter, 1)
    proc.move(tmp, env.debugCounter)
    proc.output(EVENTOUT_DATA3, tmp)
    # now create the response event
    proc.move(tmp, ereg.src)
    proc.output(EVENTOUT_SRC, tmp)

    # event
    proc.load(tmp, DLINKQUERY_COUNT_RESP)
    proc.output(EVENTOUT_CMD, tmp)
        

def manual_boot_setmask():
  proc = env.createEProc((MANBOOTSER_SETMASK, MANBOOTSER_SETMASK),
                           (0, 255))
  tmp = proc.createVariable("tmp")
  proc.move(tmp, ereg.edata[0])
  proc.output(FPROGOUT_MASKH, tmp)
  
  proc.move(tmp, ereg.edata[1])
  proc.output(FPROGOUT_MASKL, tmp)

def manual_boot_togprog():
  proc = env.createEProc((MANBOOTSER_TOGPROG, MANBOOTSER_TOGPROG),
                         (0, 255))
  tmp = proc.createVariable("tmp")
  proc.output(FPROGOUT_FPROG, tmp)

def manual_boot_writebytes(cmd):
  proc = env.createEProc((cmd, cmd),
                           (0, 255))
  tmp = proc.createVariable("tmp")
  # We always reset the data pointer so the manual operation is idempotent
  # this means we can only send 64 bits at a time. 
  proc.output(FPROGOUT_DATAPOINTERRST, tmp)
  for i in xrange(4):
    proc.move(tmp, ereg.edata[i])
    proc.output(FPROGOUT_DATA, tmp)
  # then commit
  proc.move(tmp, ereg.src)
  proc.output(EVENTOUT_SRC, tmp)
  proc.output(EVENTOUT_CMD, env.cmdBootserWriteBytes)

def manual_boot_send_bytes(cmd):
  proc = env.createEProc((cmd, cmd),
                           (0, 255))
  tmp = proc.createVariable("tmp")
  proc.output(FPROGOUT_SEND, tmp)
  proc.move(tmp, ereg.src)
  proc.output(EVENTOUT_SRC, tmp)
  proc.output(EVENTOUT_CMD, env.cmdBootserSendBytes)

def ping_proc():
  proc = env.createEProc((EVENT_CMD_PING, EVENT_CMD_PING),
                           (0, 255))
  tmp = proc.createVariable("tmp")
  proc.move(tmp, ereg.src)
  proc.output(EVENTOUT_SRC, tmp)
  # edata
  proc.load(tmp, 0x00)
  proc.output(EVENTOUT_DATA0, tmp)
  proc.output(EVENTOUT_DATA1, tmp)
  proc.output(EVENTOUT_DATA2, tmp)
  proc.output(EVENTOUT_DATA3, tmp)
  
  proc.move(tmp, ereg.edata[4])
  proc.output(EVENTOUT_DATA4, tmp)
  # send the actual

  proc.load(tmp, EVENT_CMD_PING_RESPONSE)
  proc.output(EVENTOUT_CMD, tmp)

def debug_proc():
  """
  Debug proc 
  """
  proc = env.createEProc((EVENT_DLINKDEBUG_CMD, EVENT_DLINKDEBUG_CMD),
                           (0, 255))
  tmp = proc.createVariable("tmp")
  proc.move(tmp, ereg.src)
  proc.output(EVENTOUT_SRC, tmp)
  # edata
  proc.input(0x50, tmp)
  proc.output(EVENTOUT_DATA0, tmp)

  proc.input(0x51, tmp)
  proc.output(EVENTOUT_DATA1, tmp)

  proc.input(0x52, tmp)
  proc.output(EVENTOUT_DATA2, tmp)

  proc.input(0x53, tmp)
  proc.output(EVENTOUT_DATA3, tmp)

  # send the actual
  proc.load(tmp, EVENT_DLINKDEBUG_RESP)
  proc.output(EVENTOUT_CMD, tmp)


createEnableEventCycleProc()
createEventCycleProc()

ping_proc()
proc_state_loadbootset()
proc_state_gethandle()
proc_state_openfile()
proc_state_readdata()
proc_state_serwaittx()
proc_state_yieldhandle()
proc_state_postboot()
proc_state_done()
postboot_nic()

bootStoreHandleSetRX()
bootStoreFileOpenRX()
bootStoreFileReadRX()


createDLinkStatusQueryResponse()
createDLinkStatusCountResponse()
debug_proc()

manual_boot_setmask()
manual_boot_togprog()
manual_boot_writebytes(MANBOOTSER_WRITEBYTES)
manual_boot_send_bytes(MANBOOTSER_SENDBYTES)




#testProc()
